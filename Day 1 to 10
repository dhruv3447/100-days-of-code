                                                         Day 1: Setup and Installation
Today, I kicked off my 100 Days of Code: A Challenging Complete Python Pro Bootcamp journey! The focus for Day 1 was all about setting up the tools and environment to ensure a smooth coding experience throughout the course.

What I Learned:
Installed Python using the Python Software Foundation to get the latest stable version.
Set up the Anaconda Individual Distribution to manage packages, environments, and streamline the workflow for data science projects.

Tools Installed:
Python: Core programming language
Anaconda: Comprehensive distribution with tools like Jupyter Notebook, Spyder, and package management
With the setup complete, I'm all set to dive into Python programming! Stay tuned for more updates.



                                                  Day 2: Key Concepts on Computers & Programming
Continuing my 100 Days of Code journey, Day 2 was all about understanding the foundational concepts of computers and programming. I explored different types of programming languages, their categories, and how they interact with computer hardware.

What I Learned:
*Main Types of Programming Languages

1) High-Level Languages:
Procedural Languages: Fortran, C
Non-Procedural Languages: SQL, PROLOG, LISP
Object-Oriented Languages: Java, C++, Python, Smalltalk

2) Low-Level Languages:
Machine Language: Direct binary instructions for hardware
Assembly Language: Uses mnemonics to interact with hardware

*Key Differences: High-Level vs. Low-Level Languages
High-Level Languages are easier to read and write, more abstracted from hardware, and require a compiler or interpreter.
Low-Level Languages are closer to hardware, more difficult to read, but allow for faster and more efficient code execution.

*Main Types of Programming Languages for Software Development
Front-End: HTML, CSS, JavaScript, React, Vue
Back-End: Python, Golang, PHP, Java

*Programming Language Hierarchy:
High-Level Language (e.g., Python)
Assembly Language (closer to machine operations)
Machine Language (binary code that the hardware understands)
Hardware (the physical components)

*Interpreted vs. Compiled Programming Languages:
Interpreted Languages: Run line-by-line using an interpreter, easier to debug, but slower (e.g., Python, JavaScript).
Compiled Languages: Translated into machine code before execution, faster but harder to debug (e.g., C, C++).
I'm excited to dive deeper into coding as I solidify my understanding of programming languages and their applications!



                                                      Day 3: Working With IDLE

print("Hello, welcome To Python For Engineers")
Output: Hello, welcome To Python For Engineers

print("Hello, welcome To Python For Engineers")
print("Hello, welcome To Python For Engineers again")
Output: Hello, welcome To Python For Engineers
Output: Hello, welcome To Python For Engineers again

                                                      Day 4: Values and Variable

          **What is meant by value in python?
          ans:  A Value is one of the basic things a program works with like a letter or a number

print(5)
Output: 5

print("Hello Enginner")
Output: Hello Enginner

type(5)
Output: <class 'int'>

type("Hello Enginner")
Output: <class 'str'>

type(2.0)
Output: <class 'float'>

type('20')
Output: <class 'str'>

type('20.5')
Output: <class 'str'>


          **What is Variable?
          ans: A variable is a name that refers to a value

message = "We are Enginners"
n = 17
pi = 3.141592

message
Output: 'We are Enginners'

print(message)
Output: We are Enginners

print(n)
Output: 17

print(pi)
Output: 3.141592

type(message)
Output: <class 'str'>

type(n)
Output: <class 'int'>

type(pi)
Output: <class 'float'>

x = 10
print(x)
Output: 10

x = 20
print(x)
Output: 20

x = 30
print(x)
Output: 30

a = "ABC"
type(a)
Output: <class 'str'>


          **What is Undefined Variable or Unbound Varible
          ans: A Variable that has not been assigned is known as undefined variable or unbound variable

x = 2
x
2
y
Traceback (most recent call last):
  File "<pyshell#33>", line 1, in <module>
    y
NameError: name 'y' is not defined

#Delete the Variable
del x
x
Traceback (most recent call last):
  File "<pyshell#36>", line 1, in <module>
    x
NameError: name 'x' is not defined


                                              Day 5: identifiers & Reserved keyword

          **What is Identifier?
          ans: an identifier is a word used to name things or variables values.

          **What are Reserved Keywords?
          ans: Python reserves a number of words for special use that could otherwise be used as identifiers, called as reserved words or keywords.
x = 2
x2 = 3
total = x + x2
port_22 = 2

#invalid Identifiers
sub-total = 3
SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?

first entry = 4
SyntaxError: invalid syntax

4all = 5
SyntaxError: invalid decimal literal

*4 =3
SyntaxError: cannot assign to literal

if = 3
SyntaxError: invalid syntax

class = 5
SyntaxError: invalid syntax

IF = 3
IF
Output: 3

Class = 5

# Statement in Python
x = 3
x
Output: 3

print(x)
Output: 3

#Operators And Operands

          **What are Operators & operands?
          ans: operators are special symbol that represent computations like addition and multiplication.
               The values the operator is applied to are called operands.
# +,-,*,/,and **

# addition
20 + 30
Output: 50

#subtraction
30 - 5
Output: 25

#multiplaction
3 * 4
Output: 12

#division
60 / 2
Output: 30.0

#power operation
2 ** 3
Output: 8

(5 + 4) * (20 - 5)
Output: 135

#Expression
18
Output: 18

x = 0
x + 18
Output: 18

x + 20
Output: 20


                                                    Day 6: PEMDAS Rule & Arithmetic Operator
#Order of Operations Using PEMDAS Rule

#Parantheses
2 * (4 - 2)
Output: 4

(2 + 3) * 4
Output: 20

#Exponentiation
2 ** 1 + 3
Output: 5

3 * 1 ** 3
Output: 3

#Multipilcation And Division
#Addition And Subtraction
2 * 3 - 1
Output: 5

6 + 4 / 2
Output: 8.0

# Operators with same precedence from left to right
5 - 3 - 1
Output: 1

6 + 3 - 1 + 4 + 5 * 4 + 3 * 4 / 2
Output: 38.0

#Modulus Operator
7 / 3
Output: 2.3333333333333335

7 % 3
Output: 1

7 // 3
Output: 2

#String Operation With + operator
first = '10'
second = '15'
first + second
OutputL: '1015'

# * Operator
x = 'Test'
y = 3
x * y
Output: 'TestTestTest'

x = 'Test '
x * 3
'Test Test Test'


                                                  Day 7: Inputs Comments Mnemonics
#How to ask Data From the User?
x = input()
Output: 7

y = input("Enter the value > 0:")
Output: Enter the value > 0:2

x + y
Output: '72'

x = int (x)
y = int(y)
x+y
Output: 9

y = int(input("Enter the value > 0:"))
Output: Enter the value > 0:2

type(y)
Output: <class 'int'>

# \n
y = int(input("Enter the value > 0:\n"))
Enter the value > 0:
Output: 7

type(y)
Output: <class 'int'>

y = int(input("Enter the value > 0:\n"))
Enter the value > 0:
"i am ABC"
Output: Traceback (most recent call last):
  File "<pyshell#127>", line 1, in <module>
    y = int(input("Enter the value > 0:\n"))
ValueError: invalid literal for int() with base 10: '"i am ABC"'

#How to write comments
minute = 200
percentage = (minute * 100) / 60
percentage = (minute * 100) / 60 # Compute percentage
v = 5 # Assign 5 to v
v = 5 # Velocity in m/sec
# mnemonic variables
hours = 24
rate = 23
pay = hours*rate
velocity = 5

                                                  Day 8: Basic Data types in Python

          1. Integers (int)
Represents whole numbers, both positive and negative, without any decimal point.
Examples: 10, -3, 0
Usage: Ideal for counting, indexing, and mathematical calculations.
Operations: Addition (+), Subtraction (-), Multiplication (*), Division (// for floor division), Modulus (%).

x = 42
y = -10
result = x + y  # Result: 32

          2. Floating-Point Numbers (float)
Represents numbers with a decimal point or in exponential form.
Examples: 3.14, -0.5, 2.0, 5e3 (which means 
5
×
1
0
3
5×10 
3
  or 5000).
Usage: Ideal for representing real numbers, measurements, or calculations requiring precision.
Operations: Supports all arithmetic operations like int.

pi = 3.14159
result = pi * 2  # Result: 6.28318

          3. Strings (str)
A sequence of characters enclosed in quotes (single, double, or triple quotes).
Examples: "Hello", 'Python', """This is a multi-line string""".
Usage: Ideal for storing text, names, or any combination of letters and symbols.
Operations: Concatenation (+), Repetition (*), Indexing, Slicing.

greeting = "Hello"
name = "World"
message = greeting + " " + name  # Result: "Hello World"

          4. Booleans (bool)
Represents two values: True or False.
Examples: True, False
Usage: Used in conditions, comparisons, and control flow statements (like if, while).
Operations: Logical operations such as and, or, not.

is_python_fun = True
if is_python_fun:
    print("Yes, Python is fun!")  # Output: Yes, Python is fun!

          5. Lists (list)
An ordered collection of items (elements), which can be of different data types. Lists are mutable, meaning they can be changed after creation.
Examples: [1, 2, 3], ['apple', 'banana', 'cherry'], [True, 42, 'Python'].
Usage: Ideal for storing multiple values, creating collections, and grouping related items.
Operations: Indexing, Slicing, Adding (append()), Removing (remove()), Sorting (sort()).

fruits = ['apple', 'banana', 'cherry']
fruits.append('orange')  # Result: ['apple', 'banana', 'cherry', 'orange']

          6. Tuples (tuple)
Similar to lists but immutable (cannot be changed after creation). Enclosed in parentheses.
Examples: (1, 2, 3), ('python', 'java'), (True, False).
Usage: Ideal for fixed collections of items, data that shouldn't change, or grouped related information.
Operations: Indexing, Slicing, Concatenation.

point = (10, 20)
x, y = point  # Tuple unpacking

          7. Dictionaries (dict)
Unordered collections of key-value pairs. Each key is unique, and values can be of any data type.
Examples: {'name': 'John', 'age': 30}, {'fruit': 'apple', 'quantity': 5}.
Usage: Ideal for storing data with labels, quick lookups, and creating mappings.
Operations: Adding (dict['new_key'] = value), Removing (del dict['key']), Accessing (dict['key']).

person = {'name': 'Alice', 'age': 28}
age = person['age']  # Result: 28

          8. Sets (set)
Unordered collections of unique items, without duplicates.
Examples: {1, 2, 3}, {'apple', 'banana', 'cherry'}.
Usage: Ideal for operations involving unique items, membership tests, and eliminating duplicates.
Operations: Union (|), Intersection (&), Difference (-).

numbers = {1, 2, 3, 3, 4}
unique_numbers = set(numbers)  # Result: {1, 2, 3, 4}

Summary
Understanding these data types is fundamental to writing clean and efficient code in Python. 
Each data type has its unique use case and provides tools to manipulate data effectively.
Stay tuned for more updates as I continue to dive deeper into Python programming!

                                                Day 9: Code Blocks in Python & Their importance

          **What is code block in Python?
          Ans: A code block is a piece of Python program text that can be executed as a unit, such as a module, a class definition or a function body.

• Indentation
Indentation refers to the spaces at the beginning of a code line. 
Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important. 
Python uses indentation to indicate a block of code.

print("Python is importance for Data Science")
print("Pandas is importance for Data Science")

x = 1
if x == 1:
    print('x has a value of 1')
    print('If x = 1; then this if block will execute')
    print("This is for indentation check")
else:
    print('x does NOT have a value of 1')
    print("This is for indentation check")
    
print("I don't know who is x, because I am not in if block")
#%%
print("Python is importance for Data Science")
print("Pandas is importance for Data Science")

x = 0
if x == 2:
    print('x has value of 2')
else:
    print('x does NOT have a value of 2')
    print("This line is not in line with the above print statement")
#%%

                                                  Day 10: Arithmetic Comparisson & Assignment Operators

          **What is Python Operator?
          Ans: Python operator is a symbol that performs an operation on one or more operands. An operand is a variable or a value on which we perform the operation.

Python language supports the following 7 types of operators.

• Arithmetic Operators:
+    Addition
-    Subtraction
*    Multiplication
/    Division
%    Modulus
**Exponent  Exponentiation
//   Floor Division - Integer division rounded toward minus infinity


• Comparison or Relational Operators:
These operators are used to compare two values and return a boolean result (True or False). They are essential for conditions and control flow statements.

Operator  Description                Example    Result
==	      Equal to	                 5 == 5	    True
!=	      Not equal to               5 != 3	    True
>	        Greater than               7 > 5	    True
<	        Less than                  3 < 8 	    True
>=	      Greater than or equal to	 5 >= 5    	True
<=	      Less than or equal to	     4 <= 6	    True


• Assignment Operators
Assignment operators are used to assign values to variables. They can also perform operations and assign the result simultaneously.

Operator  Description                Example    Explanation
=	        Assigns value	             x = 10	    x is now 10
+=	      Add and assign	           x += 5 	  x = x + 5
-=	      Subtract and assign	       x -= 2	    x = x - 2
*=	      Multiply and assign	       x *= 3 	  x = x * 3
/=	      Divide and assign        	 x /= 4   	x = x / 4
//=	      Floor divide and assign	   x //= 2  	x = x // 2
%=	      Modulus and assign         x %= 3	    x = x % 3
**=	      Exponentiate and assign	   x **= 2  	x = x ** 2

• Bitwise Operatorscho
Bitwise operators perform operations on binary digits of numbers. They are mainly used for manipulating individual bits within an integer.

Operator  Description                Example    Explanation
&	        AND	                       5 & 3	    0101 & 0011 → 0001 (Result: 1)
`	        `	                         OR	        `5
^        	XOR (exclusive OR)	       5 ^ 3	    0101 ^ 0011 → 0110 (Result: 6)
~        	NOT (bitwise negation)	   ~5	        ~0101 → 1010 (Result: -6)
<<	      Left Shift	               5 << 1	    0101 << 1 → 1010 (Result: 10)
>>	      Right Shift	               5 >> 1	    0101 >> 1 → 0010 (Result: 2)

• Logical Operators
Logical operators are used to combine conditional statements, returning a boolean result (True or False).

Operator  Description                            Example          Result
and	      Returns True if both are True	         True and False	  False
or	      Returns True if at least one is True	 True or False	  True
not      	Returns True if the operand is False	 not True	        False

• Membership Operators
Membership operators are used to check if a value is a member of a sequence (like a string, list, tuple, or set).

Operator  Description                                          Example              Result
in	      Returns True if value is found in the sequence	     'a' in 'apple'	      True
not in  	Returns True if value is not found in the sequence	 'x' not in 'apple'	  True

• Identity Operators
Identity operators are used to compare the memory locations of two objects, determining whether they refer to the same object.

Operator  Description                                          Example              Result
is	      Returns True if both variables point to              x is y               True if x and y reference
          the same object	                                                          the same object                                    	
is not	  Returns True if they do not point to                 x is not y	          True if x and y are different objects
          the same object
